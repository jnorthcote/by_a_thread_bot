Role  Description
Artifact Registry Reader
(roles/artifactregistry.reader)  View and get artifacts, view repository metadata.
Artifact Registry Writer
(roles/artifactregistry.writer)  Read and write artifacts.
Artifact Registry Repository Administrator
(roles/artifactregistry.repoAdmin)  Read, write, and delete artifacts.
Artifact Registry Administrator
(roles/artifactregistry.admin)   Create and manage repositories and artifacts.

export PROJECT_ID=narmb-369710
export PROJECT=$PROJECT_ID

gcloud iam service-accounts create jenkins-sa-push

export SA_EMAIL=$(gcloud iam service-accounts list --filter="name:jenkins-sa-push" \
 --format='value(email)')
 echo SA_EMAIL $SA_EMAIL

gcloud projects add-iam-policy-binding --member serviceAccount:$SA_EMAIL \
 --role roles/artifactregistry.reader $PROJECT

gcloud projects add-iam-policy-binding --member serviceAccount:$SA_EMAIL \
 --role roles/artifactregistry.writer $PROJECT

gcloud projects add-iam-policy-binding --member serviceAccount:$SA_EMAIL \
 --role roles/iam.serviceAccountUser $PROJECT

gcloud projects get-iam-policy $PROJECT

gcloud iam roles create JenkinsCD --project=$PROJECT --description=jenkins --permissions=container.deployments.create,container.deployments.delete,container.deployments.get,container.deployments.getScale,container.deployments.getStatus,container.deployments.list,container.deployments.rollback,container.deployments.update,container.deployments.updateScale,container.deployments.updateStatus

gcloud projects add-iam-policy-binding --member serviceAccount:$SA_EMAIL \
 --role projects/narmb-369710/roles/JenkinsCD $PROJECT

gcloud container clusters get-credentials nova-ocr-bot-cluster --region $REGION

TOKENNAME=`kubectl -n bat-bot get serviceaccount/bot-bat-sa -o jsonpath='{.secrets[0].name}'`

kubectl -n bat-bot get serviceaccount/bat-bot-sa

$ export SECRET_NAME_SA=`kubectl get sa my-sa-test -n test-ns -ojsonpath="{ .secrets[0].name }"`
$ export TOKEN_SA=`kubectl get secret $SECRET_NAME_SA -n test-ns -ojsonpath='{.data.token}' | base64 -d`

export SECRET_NAME_SA=bat-bot-sa
export TOKEN_SA=eyJhbGciOiJSUzI1NiIsImtpZCI6IkZMbWhoWVdNbFlRaDRwVnpxenEtMUZvMzNrWTRnZ0tTZHEzZmdQdUZWNTgifQ.eyJhdWQiOlsiaHR0cHM6Ly9jb250YWluZXIuZ29vZ2xlYXBpcy5jb20vdjEvcHJvamVjdHMvbmFybWItMzY5NzEwL2xvY2F0aW9ucy91cy13ZXN0MS9jbHVzdGVycy9ub3ZhLW9jci1ib3QtY2x1c3RlciJdLCJleHAiOjE2ODQ0MTYwOTQsImlhdCI6MTY4NDQxMjQ5NCwiaXNzIjoiaHR0cHM6Ly9jb250YWluZXIuZ29vZ2xlYXBpcy5jb20vdjEvcHJvamVjdHMvbmFybWItMzY5NzEwL2xvY2F0aW9ucy91cy13ZXN0MS9jbHVzdGVycy9ub3ZhLW9jci1ib3QtY2x1c3RlciIsImt1YmVybmV0ZXMuaW8iOnsibmFtZXNwYWNlIjoiYmF0LWJvdCIsInNlcnZpY2VhY2NvdW50Ijp7Im5hbWUiOiJiYXQtYm90LXNhIiwidWlkIjoiYThhOWUyMDAtMzRiNi00NTljLThiMmMtYTMyMTJhODkzNGIzIn19LCJuYmYiOjE2ODQ0MTI0OTQsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDpiYXQtYm90OmJhdC1ib3Qtc2EifQ.yuyFUCzMaY1xEUSBIXnuVN98XlRvNJ6YEnZQSijb712p4QQYJC89lUFTyZiSuFOW-wlLO0UUifjW-M8iTLB8BmlA9l4lznlACxQYvm-F3WH0QZI8II9olOcRdAS75PyytnxFVmx2KpA8pmC9locHr0wcuc3Y6JmNbdeKhoyVCKcdYtas9r5CqjFx4Eez_vHbt5CHgP8sNsbDPdE0bXCS_5ccV1eBJidmTF45v_s41Qin8O4hC5zHg6DiRw0UubwJa7e7KYWYTzktX8ERxQxvruswa5kX18paRU4JfxyUjq0lgaKoGKYPx0T3i8QC2rkx7lEE8xvWFex1-CGkVYGXeg

kubectl config view --raw --minify > kubeconfig.txt
kubectl config unset users --kubeconfig=kubeconfig.txt
kubectl config set-credentials ${SECRET_NAME_SA} --kubeconfig=kubeconfig.txt --token=${TOKEN_SA}
kubectl config set-context --current --kubeconfig=kubeconfig.txt --user=${SECRET_NAME_SA}

kubectl --token=${TOKEN_SA} -n bat-bot get deployments

kubectl -n bat-bot describe secret bot-bat-sa-token

gcloud iam list-testable-permissions //cloudresourcemanager.googleapis.com/projects/narmb-369710 --filter="customRolesSupportLevel!=NOT_SUPPORTED"

gcloud iam list-testable-permissions //cloudresourcemanager.googleapis.com/projects/narmb-369710 --filter="apiDisabled=false"


  git config --global user.email "jason.northcote@gmail.com"
  git config --global user.name "Jason Northcote"



export PROJECT_ID=narmb-369710
export REGION=us-west1

echo $PROJECT_ID


export BOT_TOKEN=ZGlzY29yZC1zZWNyZXQudHh0
kubectl apply -f secrets.yml
envsubst < secrets.yml | kubectl apply -f -

envsubst < bot-deployment.yml | kubectl apply -f -


gcloud config set project $PROJECT_ID

gcloud artifacts repositories create nova-ocr-bot \
   --repository-format=docker \
   --location=us-west1 \
   --description="Docker repository for bot artifacts"


gcloud artifacts repositories create bat-bot \
   --repository-format=docker \
   --location=us-west1 \
   --description="Docker repository for bot artifacts"

   He@thLedg3r
   git clone https://github.com/jnorthcote/ocr-bot-discord.git


   docker build -t REGION-docker.pkg.dev/${PROJECT_ID}/hello-repo/hello-app:v1 .

docker-compose -f dc-bot.yml build && docker-compose -f dc-bot.yml up -d && docker logs -f ocr-bot

docker compose -f dc-bot.yml build .

gcloud artifacts repositories add-iam-policy-binding bat-bot \
    --location=us-west1 \
    --member=serviceAccount:40165470279-compute@developer.gserviceaccount.com \
    --role="roles/artifactregistry.reader"

gcloud auth configure-docker us-west1-docker.pkg.dev

cat narmb-369710-a324ab891874.json | docker login -u _json_key --password-stdin \
https://us-west1-docker.pkg.dev

docker push us-west1-docker.pkg.dev/${PROJECT_ID}/nova-ocr-bot/nova-ocr-app:v1
docker push us-west1-docker.pkg.dev/${PROJECT_ID}/bat-bot/bat-bot-app:v1


gcloud config set compute/region $REGION


gcloud container clusters create-auto ocr-bot-cluster

gcloud container clusters get-credentials ocr-bot-cluster --region $REGION


kubectl create deployment nova-ocr-app --image=${REGION}-docker.pkg.dev/${PROJECT_ID}/nova-ocr-bot/nova-ocr-app:v1

kubectl scale deployment nova-ocr-app --replicas=3

kubectl autoscale deployment nova-ocr-app --cpu-percent=80 --min=1 --max=5

kubectl get pods